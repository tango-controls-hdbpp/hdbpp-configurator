//+======================================================================
// $Source:  $
//
// Project:   Tango
//
// Description:  Basic Dialog Class to display info
//
// $Author: pascal_verdier $
//
// Copyright (C) :      2004,2005,......,2018
//						European Synchrotron Radiation Facility
//                      BP 220, Grenoble 38043
//                      FRANCE
//
// This file is part of Tango.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//-======================================================================

package org.tango.hdb_configurator.common;

import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

//===============================================================
/**
 *	JDialog Class to display info
 *
 *	@author  Pascal Verdier
 */
//===============================================================

public class ItemSelectionDialog extends JDialog {
	private List<Item> itemList = new ArrayList<>();
	private boolean ok;
	//===============================================================
	//===============================================================
	public ItemSelectionDialog(JFrame parent, String title, List<String> names, boolean selected) {
		super(parent, true);
		buildTheForm(title, names, selected);
	}
	//===============================================================
	//===============================================================
	public ItemSelectionDialog(JDialog parent, String title, List<String> names, boolean selected) {
		super(parent, true);
		buildTheForm(title, names, selected);
	}
	//===============================================================
	//===============================================================
	private void buildTheForm(String title, List<String> names, boolean selected) {
		initComponents();
		for (String name : names)
			itemList.add(new Item(name, selected));

		getContentPane().remove(centerPanel);
		SelectionTable table = new SelectionTable(selected);
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setPreferredSize(table.getTableDimension());
		getContentPane().add(scrollPane, BorderLayout.CENTER);

		titleLabel.setText(title);
		pack();
 		ATKGraphicsUtils.centerDialog(this);
	}
	//===============================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//===============================================================
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel topPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        javax.swing.JButton okBtn = new javax.swing.JButton();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setText("Dialog Title");
        topPanel.add(titleLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        centerPanel.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(okBtn);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(cancelBtn);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//===============================================================
	//===============================================================
    @SuppressWarnings("UnusedParameters")
	private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
    	ok = true;
		doClose();
	}//GEN-LAST:event_okBtnActionPerformed
	//===============================================================
	//===============================================================
	@SuppressWarnings("UnusedParameters")
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
		ok = false;
    	doClose();
	}//GEN-LAST:event_cancelBtnActionPerformed
	//===============================================================
	//===============================================================
    @SuppressWarnings("UnusedParameters")
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		ok = false;
		doClose();
	}//GEN-LAST:event_closeDialog
	//===============================================================
	//===============================================================
	private void doClose() {
		setVisible(false);
		dispose();
	}
	//===============================================================
	//===============================================================
	public List<String> showDialog() {
		setVisible(true);
		List<String> list = new ArrayList<>();
		if (ok) {
			for (Item item : itemList)
				if (item.selected)
					list.add(item.name);
		}
		return list;
	}
	//===============================================================
	//===============================================================



	//===============================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
	//===============================================================




	//===============================================================
	/**
	* @param args the command line arguments
	*/
	//===============================================================
	public static void main(String[] args) {
		List<String> attributeList = new ArrayList<>();
		attributeList.add("srvac/v-pen/c04-ch02inj-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch05-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch07-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch09-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch13-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch14-1/pressure");
		attributeList.add("srvac/v-pen/c04-ch16inj-1/pressure");
		attributeList.add("srvac/v-pen/c04-sept-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch02inj-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch04inj-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch05-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch06-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch07-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch07-2/pressure");
		attributeList.add("srvac/v-ip/c04-ch08-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch09-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch09-2/pressure");
		attributeList.add("srvac/v-ip/c04-ch12-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch13-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch14-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch15inj-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch16inj-1/pressure");
		attributeList.add("srvac/v-ip/c04-ch22inj-1/pressure");
		attributeList.add("srvac/v-ip/c04-sept-1/pressure");

		List<String> selectionList = new ItemSelectionDialog(
				(JFrame) null, "Attribute Selection", attributeList, true).showDialog();
		if (selectionList.isEmpty())
			System.out.println("No Selection");
		else {
			for (String selection : selectionList)
				System.out.println(selection);
		}
	}
	//===============================================================
	//===============================================================



	//===============================================================
	//===============================================================
	private static class Item {
		private String name;
		private boolean selected;
		private Item(String name, boolean selected) {this.name = name; this.selected = selected; }
		private void toggleSelection() { selected = !selected; }
	}
	//===============================================================
	//===============================================================





	private static final String[] COLUMN_HEADERS = {
			"Name", "Sel.",
	};
	private static final int NAME = 0;
	private static final int SELECTION = 1;
	private static final Color firstColumnColor = new Color(0xdd, 0xdd, 0xdd);
	//===============================================================
	//===============================================================
	public class SelectionTable extends JTable {
		private int tableWidth = 0;
		private int selectedRow = -1;
		private boolean selected;
		//===============================================================
		//===============================================================
		public SelectionTable(boolean selected) {
			this.selected = selected;
			// Create the table
			DataTableModel model = new DataTableModel();
			setModel(model);
			setRowSelectionAllowed(true);
			setDefaultRenderer(String.class, new LabelCellRenderer());
			getTableHeader().addMouseListener(new MouseAdapter() {
				public void mouseClicked(MouseEvent event) {
					tableHeaderActionPerformed(event);
				}
			});
			addMouseListener(new MouseAdapter() {
				public void mouseClicked(MouseEvent event) {
					tableActionPerformed(event);
				}
			});
			//  Column header management
			getTableHeader().setFont(new Font("Dialog", Font.BOLD, 14));

			//  Set column width
			final Enumeration columnEnum = getColumnModel().getColumns();
			int i = 0;
			TableColumn tableColumn;
			while (columnEnum.hasMoreElements()) {
				int width = getColumnWidth(i++);
				tableWidth += width;
				tableColumn = (TableColumn) columnEnum.nextElement();
				tableColumn.setPreferredWidth(width);
			}
		}
		//===============================================================
		//===============================================================
		private void tableHeaderActionPerformed(MouseEvent event) {
			selectedRow = rowAtPoint(new Point(event.getX(), event.getY()));
			if (event.getButton()==1 &&
					columnAtPoint(new Point(event.getX(), event.getY()))==SELECTION) {
				selected =! selected;
				for (Item item : itemList) {
					item.selected = selected;
				}
			}
			repaint();
		}
		//===============================================================
		//===============================================================
		private void tableActionPerformed(MouseEvent event) {
			selectedRow = rowAtPoint(new Point(event.getX(), event.getY()));
			if (event.getButton()==1) {
				itemList.get(selectedRow).toggleSelection();
			}
			repaint();
		}
		//===============================================================
		//===============================================================
		private int getColumnWidth(int column) {
			int width = 0;
			for (int row = 0; row < getRowCount(); row++) {
				TableCellRenderer renderer = getCellRenderer(row, column);
				Component comp = prepareRenderer(renderer, row, column);
				width = Math.max (comp.getPreferredSize().width, width);
			}
			if (width<30)	width = 30;
			return width;

		}
		//===============================================================
		//===============================================================
		private int getTableHeight() {
		    //  Rows as cell in 0,0
			Component cell = getCellRenderer(0,0).
                    getTableCellRendererComponent(this, getValueAt(0, 0), false, false, 0, 0);
			Font font = cell.getFont();
			FontMetrics metrics = cell.getFontMetrics(font);
			int cellHeight = metrics.getHeight()+1;

			//  Add header
			JTableHeader header = getTableHeader();
			header.setReorderingAllowed(false);
			font = header.getFont();
			int headerHeight = header.getFontMetrics(font).getHeight() + 10; // + border
			return itemList.size()*cellHeight + headerHeight;
		}
		//===============================================================
		//===============================================================
		public Dimension getTableDimension() {
			// Add a margin in case of scroll bar
			return new Dimension(tableWidth + 40, getTableHeight());
		}
		//===============================================================
		//===============================================================




		//==============================================================
		/**
		 * The Table model
		 */
		//==============================================================
		public class DataTableModel extends AbstractTableModel {
			//==========================================================
			@Override
			public int getColumnCount() {
				return COLUMN_HEADERS.length;
			}
			//==========================================================
			@Override
			public int getRowCount() {
				return itemList.size();
			}
			//==========================================================
			@Override
			public String getColumnName(int columnIndex) {
				if (columnIndex >= getColumnCount())
					return COLUMN_HEADERS[getColumnCount()-1];
				else
					return COLUMN_HEADERS[columnIndex];
			}
			//==========================================================
			@Override
			public Object getValueAt(int row, int column) {
				if (column==SELECTION) {
					return itemList.get(row).selected;
				}
				return "";
			}
			//==========================================================
			@Override
			public void setValueAt(Object value, int row, int column) {
			}
			//==========================================================
			/**
			 * JTable uses this method to determine the default renderer/
			 * editor for each cell.  If we didn't implement this method,
			 * then the last column would contain text ("true"/"false"),
			 * rather than a check box.
			 *
			 * @param  column the specified co;umn number
			 * @return the cell class at first row for specified column.
			 */
			//==========================================================
			@Override
			public Class getColumnClass(int column) {
				if (isVisible()) {
					if (column == SELECTION)
						return Boolean.class;
					else
						return getValueAt(0, column).getClass();
				}
				else
					return null;
			}
			//==========================================================
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
			//==========================================================
		}
		//==============================================================
		//==============================================================




		//==============================================================
		/**
		 * Renderer to set cell color
		 */
		//==============================================================
		public class LabelCellRenderer extends JLabel implements TableCellRenderer {
			//==========================================================
			public LabelCellRenderer() {
				setOpaque(true); //MUST do this for background to show up.
			}
			//==========================================================
			@Override
			public Component getTableCellRendererComponent(
					JTable table, Object value,
					boolean isSelected, boolean hasFocus,
					int row, int column) {
				Item item = itemList.get(row);
				setIcon(null);

				//  Display value (column 0 is line number)
				setText(" "+item.name);

				if (column==NAME)
					setBackground(firstColumnColor);
				else
				if (row==selectedRow)
					setBackground(selectionBackground);
				else
					setBackground(Color.white);

				return this;
			}
		}
		//==============================================================
		//==============================================================
	}}
