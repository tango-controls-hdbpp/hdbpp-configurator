//+======================================================================
// $Source:  $
//
// Project:   Tango
//
// Description:  Basic Dialog Class to display info
//
// $Author: pascal_verdier $
//
// Copyright (C) :      2004,2005,2006,2007,2008,2009,2009,2010,2011,2012,2013,2014,2015
//						European Synchrotron Radiation Facility
//                      BP 220, Grenoble 38043
//                      FRANCE
//
// This file is part of Tango.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//-======================================================================

package org.tango.hdb_configurator.configurator;

import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoDs.Except;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import fr.esrf.tangoatk.widget.util.ErrorPane;
import org.tango.hdb_configurator.common.*;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Set;


//===============================================================
/**
 *	JDialog Class to display info
 *
 *	@author  Pascal Verdier
 */
//===============================================================


public class TtlTableDialog extends JDialog {
	private JFrame	parent;
	private SubscriberMap subscriberMap;
	private List<TtlTable> ttlTableList = new ArrayList<>();


    private static final int ATTRIBUTE_NAME = 0;
    private static final String[] columnNames = { "Attribute Names", "TTL"};
    private static final int[] columnWidth = { 500, 60 };
	//===============================================================
	/**
	 *	Creates new form TtlTableDialog
	 */
	//===============================================================
	public TtlTableDialog(JFrame parent, SubscriberMap subscriberMap) throws DevFailed {
		super(parent, true);
		this.parent = parent;
		this.subscriberMap = subscriberMap;
		initComponents();

		initializeTtlTables();
		if (ttlTableList.isEmpty())
            Except.throw_exception("NoTTL", "No TTL attribute found");
		buildTabbedTables();

		titleLabel.setText("TTL Attributes");
		pack();
 		ATKGraphicsUtils.centerDialog(this);
		SplashUtils.getInstance().stopSplash();
	}
	//===============================================================
	//===============================================================
    private void buildTabbedTables() {
        int idx=0;
        for (TtlTable ttlTable : ttlTableList) {
            JScrollPane scrollPane = new JScrollPane(ttlTable);
            tabbedPane.add(scrollPane);
            tabbedPane.setTitleAt(idx++, ttlTable.subscriber.getLabel());
            scrollPane.setPreferredSize(new Dimension(ttlTable.tableWidth, 300));
        }
    }
	//===============================================================
	//===============================================================
	private void initializeTtlTables() {
		for (Subscriber subscriber : subscriberMap.getSubscriberList()) {
            Set<String> keys = subscriber.getHdbAttributeMap().keySet();
            List<HdbAttribute> attributeList = new ArrayList<>();
            for (String  attributeName : keys) {
                HdbAttribute hdbAttribute = subscriber.getHdbAttributeMap().get(attributeName);
                if (hdbAttribute!=null) {
                    long ttl = hdbAttribute.getTTL();
                    if (ttl>0) {
                        attributeList.add(hdbAttribute);
                    }
                }
            }
            if (!attributeList.isEmpty()) {
                ttlTableList.add(new TtlTable(subscriber, attributeList));
            }
		}
	}
	//===============================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//===============================================================
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel topPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Dialog", Font.BOLD, 18));
        titleLabel.setText("Dialog Title");
        topPanel.add(titleLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        cancelBtn.setText("Dismiss");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(cancelBtn);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);
        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//===============================================================
	//===============================================================
	@SuppressWarnings("UnusedParameters")
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
		doClose();
	}//GEN-LAST:event_cancelBtnActionPerformed
	//===============================================================
	//===============================================================
    @SuppressWarnings("UnusedParameters")
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		doClose();
	}//GEN-LAST:event_closeDialog
	//===============================================================
	//===============================================================
	private void doClose() {
		if (parent==null)
			System.exit(0);
		else {
			setVisible(false);
			dispose();
		}
	}
	//===============================================================
	//===============================================================



	//===============================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
	//===============================================================




	//===============================================================
	/**
	* @param args the command line arguments
	*/
	//===============================================================
	public static void main(String args[]) {
		try {
            SplashUtils.getInstance().startSplash();
            SplashUtils.getInstance().increaseSplashProgress(10, "Building GUI");
            SubscriberMap subscriberMap = new SubscriberMap(Utils.getConfiguratorProxy());
			new TtlTableDialog(null, subscriberMap).setVisible(true);
		}
		catch(DevFailed e) {
			ErrorPane.showErrorMessage(new JFrame(), null, e);
			System.exit(0);
		}
	}
    //===============================================================
    //===============================================================




    //===============================================================
    //===============================================================
    private class TtlTable extends JTable {
        private Subscriber subscriber;
        private List<HdbAttribute> ttlAttributes;
        private int tableWidth = 0;
        //===========================================================
        private TtlTable(Subscriber subscriber, List<HdbAttribute> ttlAttributes) {
            this.subscriber = subscriber;
            this.ttlAttributes = ttlAttributes;
            // Create the table
            TtlTableModel model = new TtlTableModel(this);
            setModel(model);
            setRowSelectionAllowed(true);
            setDragEnabled(false);
            addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent event) {
                    tableActionPerformed(event);
                }
            });
            //  Set column width
            final Enumeration columnEnum = getColumnModel().getColumns();
            int i = 0;
            TableColumn tableColumn;
            while (columnEnum.hasMoreElements()) {
                tableWidth += columnWidth[i];
                tableColumn = (TableColumn) columnEnum.nextElement();
                tableColumn.setPreferredWidth(columnWidth[i++]);
            }
            getTableHeader().setReorderingAllowed(false);
        }
        //===========================================================
        private void tableActionPerformed(MouseEvent event) {
            if (event.getClickCount()==2) {
                if (parent instanceof HdbConfigurator) {
                    ((HdbConfigurator) parent).selectArchiver(subscriber.getLabel());
                    ((HdbConfigurator) parent).selectAttributeInList(ttlAttributes.get(getSelectedRow()).getName());
                    doClose();
                }
            }
         }
        //===========================================================
        public String toString() {
            StringBuilder sb = new StringBuilder(subscriber.getLabel()+'\n');
            for (HdbAttribute ttlAttribute : ttlAttributes)
                sb.append("    ").append(ttlAttribute).append('\n');
            return sb.toString();
        }
        //===========================================================
    }
    //===============================================================
    //===============================================================



    //==============================================================
    /**
     * The Table model
     */
    //==============================================================
    public class TtlTableModel extends AbstractTableModel {
        private TtlTable ttlTable;
        private TtlTableModel(TtlTable ttlTable) { this.ttlTable = ttlTable; }
        //==========================================================
        public int getColumnCount() {
            return columnNames.length;
        }

        //==========================================================
        public int getRowCount() {
            return ttlTable.ttlAttributes.size();
        }

        //==========================================================
        public String getColumnName(int columnIndex) {
            String title;
            if (columnIndex >= getColumnCount())
                title = columnNames[getColumnCount()-1];
            else
                title = columnNames[columnIndex];

            // remove tango host if any
            if (title.startsWith("tango://")) {
                int index = title.indexOf('/', "tango://".length());
                title = title.substring(index+1);
            }

            return title;
        }
        //==========================================================
        public Object getValueAt(int row, int column) {
            HdbAttribute hdbAttribute = ttlTable.ttlAttributes.get(row);
            switch (column) {
                case ATTRIBUTE_NAME:
                    return hdbAttribute.getName();
                default:
                    return "  " + hdbAttribute.getTtlString();
            }
        }
        //==========================================================
        /**
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         *
         * @param  column the specified co;umn number
         * @return the cell class at first row for specified column.
         */
        //==========================================================
        public Class getColumnClass(int column) {
            if (isVisible()) {
                return getValueAt(0, column).getClass();
            }
            else
                return null;
        }
        //==========================================================
        //==========================================================
    }
    //==============================================================
    //==============================================================


}
